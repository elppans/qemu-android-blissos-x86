# BlissOS system inside the data file
# https://blissos.org/
# This option causes the BlissOS system image to be copied into the data file so that it can be booted.
# Newer versions of the system do not use ramdisk.img and the default configuration causes an infinite boot error and does not recognize the data file, making it impossible to use the system.
# When activated, ramdisk.img will be ignored. and BlissOS will be used inside the data.
BLISSOSFS=enable

# RAM in megabytes, defaults to 2048. (BlissOS min. 3072)
RAM=4096

# Number of CPU cores, defaults to 2.
#CORES=2

# CPU definition, defaults to "host"
# Default Example:
#CPU="host"
# Test with old CPU:
#CPU="core2duo"

# "video=" string to pass to the kernel. Defaults to no string set.
#VIDEO="1280x720x32"

# Data partition location.
# If a file is specified it will be a raw image and created if it does not
# exist.  By default, it will create a file at $HOME/.config/android-x86/data.img
# as a sparse file with an EXT4 filesystem.
# If a directory is specified, it'll be mounted as a 9p share.  QEMU must run under
# sudo and will pop a terminal if run graphically.
# If set to "none", no data partition will be set.
# Example:
#DATA="none" # Save no data
#DATA="/tmp/data.img" # Create a data file in /tmp. 
DATA="$HOME/.config/android-x86/blissos/data.img" # Create a data file in local custom
#DATA="$HOME/.config/android-x86/blissos/data" # Create a data dir in local custom (will only work for ext4 filesystems).

# Data partition size in megabytes.  Only used on creation of a partition image.
# defaults to 2048.
# custom configuration for BlissOS 12048 (11,8G)
DATASIZE=30720

# Ramdisk image location.
# A temporary filesystem image used to load essential scripts and configurations into RAM during boot-up.
# If a file is specified it will be a raw image and created if it does not
# exist.  By default, it will create a file at $HOME/.config/android-x86/ramdisk.img
# ramdisk.img is not used in BlissOS Android 10+
# If set to "none", no ramdisk image will be set.
# Example:
#RAMDISK="none" # Does not use ramdisk image
RAMDISK="$HOME/.config/android-x86/blissos/ramdisk.img" # Create a image file in local custom

# Ramdisk image size in kilobytes.  Only used on creation of a ramdisk image.
# defaults to 2048.
#RAMDISKSIZE=4096

# Note: right now the only thing that's working right now with VirGL on machines tested
# is SDL with an external serial0.   GTK shows the serial but no video, SDL shows
# the windows all overlayed with each other.

# Serial output.  Currently a rootshell.  Defaults to no serial.
#
# Examples:
# default stdio, will pop a terminal in graphical mode
SERIAL="mon:stdio" # console on terminal or in urxvt if gui mode.
#SERIAL="telnet:127.0.0.1:9000,server,nowait"  # telnet to port 900 for root, might be insecure

# Bridged networking.  
#
# If you use a bridged network for vitual machines, you can set it here.
# Otherwise it uses user networking.  Make sure to allow the bridge in /etc/qemu/bridge.conf
#BRIDGE=outer0

# Method to launch QEMU.  Example is default, which uses SDL and allow for
# VirGL, which is a feature as of 8.1-r1.  For some reason GTK isn't working on all
# the tested machines, only SDL.
# Example (default):
#VGALINE="-vga virtio -display sdl,gl=on"
VGALINE="-device virtio-vga-gl,edid=on -display sdl,gl=on,show-cursor=true"

# EFI Boot
# Is needed to tell Qemu to boot using UEFI,
# which is necessary as right now there is a bug that prevents android-generic based roms from being installed when in legacy mode.
# It is important to note that the location of this can vary depending on the host OS.
#EFIBOOT="-bios /usr/share/ovmf/x64/OVMF.fd" # Default option
#EFIBOOT="none"

# Custom for r/w system images for BlissOS:
SYSTEMIMG="$HOME/.config/android-x86/blissos/system.sfs"
INITRD="$HOME/.config/android-x86/blissos/initrd.img"
KERNEL="$HOME/.config/android-x86/blissos/kernel"

